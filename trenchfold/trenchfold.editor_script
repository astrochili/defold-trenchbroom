--[[
  trenchfold.editor_script
  github.com/astrochili/defold-trenchfold

  Copyright (c) 2022 Roman Silin
  MIT license. See LICENSE for details.
--]]

local config = require 'trenchfold.config'
local trenchfold = require 'trenchfold.trenchfold'

local editor_script = { }

local platforms = {
  windows = 'x86_64-win32',
  macos = 'x86_64-darwin',
  linux = 'x86_64-linux'
}

local function is_command_active(options)
  local path = editor.get(options.selection, 'path')
  local is_map = path:sub(-4) == '.map'
  return is_map
end

local function init_config(options)
  local folder_separator = editor.platform == platforms.windows and '\\' or '/'

  local map_path = editor.get(options.selection, 'path')
  local map_directory = map_path:match('(.*)' .. '/'):sub(2)
  local map_name = map_path:match('.+/(.+)%.map')

  config.init(folder_separator, map_directory, map_name)
end

local function clean_up_component_folders()
  print('')
  print('# Cleaning up')

  local paths = {
    config.buffer_directory,
    config.mesh_directory,
    config.convexshape_directory,
    config.collisionobject_directory,
    config.script_directory
  }

  for _, path in ipairs(paths) do
    local resource_path = '/' .. path

    editor.delete_directory(resource_path)
    editor.create_directory(resource_path)

    print('Cleaned up \'' .. path .. '\'')
  end

  print('')
end

local function map_to_collection(options)
  init_config(options)
  clean_up_component_folders()
  trenchfold.convert()
end

function editor_script.get_commands()
  local converting_command = {
    label = 'Convert Map to Collection',
    locations = { 'Assets' },
    query = {
      selection = { type = 'resource', cardinality = 'one' }
    },
    active = is_command_active,
    run = map_to_collection
  }

  return { converting_command }
end

return editor_script